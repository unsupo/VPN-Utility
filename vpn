#!/usr/bin/env bash

cisco=/opt/cisco/anyconnect/bin/vpn

function printHelp() {
  echo "
CISCO Any Connect Script
-d|--disconnect)
  Use this method to disconnect from whatever vpn you are on
-c|--connect)
  Use this method along with a parameter to connect to a vpn
  example:
  cisco -c aloha-west
-g|--get-connected)
  Use this method to get the currently connected vpn
-p|--get-password)
  get password
-cp|--change-password)
  change password
-rp|--remove-password)
  remove password
-np|--needs-password)
  Does the script need a password?
  exit status of 1 or 0
  if vpn -np ; then echo yes; else echo no; fi
-sp|--set-password)
  requires: vpn name as parameter
  This sets a password for a specific vpn use this if this vpn
  password differs from global password

EXIT CODES:
  22 - means unable to login with username/password/code combination
"
}
function disconnect() {
  ${cisco} disconnect
}
function connect() {
  [[ "$1" == "$USER" ]] && usr="" || usr="$1"
  export VPN_PASS="$2"
  pass="$2"
  host="$3"
  grp="$4"
  spass="push"
  export pass="${pass}"
  echo "CONNECTING"
  output=$(expect -c "
log_user 0
set timeout -1
proc passw {pass} {
  set try 0
  expect {
    \"Group:*\" {
      send -- \"$grp\\r\"
      exp_continue
    }
    \"Username:*\" {
      send -- \"$usr\\r\"
      exp_continue
    }
    \"\nPass*\" {
      send -- \"\$pass\\r\"
      exp_continue
    }
    \"Second Pass*\" {
      send -- \"$spass\\r\"
      exp_continue
    }
    \"accept?*\" {
      send -- \"y\\r\"
      exp_continue
    }
    \"Answer:*\" {
      send -- \"push\\r\"
      exp_continue
    }
    \"*\state: Connected*\"
  }
}
spawn $cisco -s connect \"${host}\"
passw \$env(pass)
interact
")
  if grep 'Login failed: We canâ€™t log you in. Check your username, password, and verification code' <<< "$output" ; then
    exit 22
  fi
#  printf "$1\n$2\ny" | $cisco -s connect "$3"
}
function getConnection() {
  vpn_conn=$(${cisco} stats|grep 'Connected to'|sed 's/.*to //' | sed 's/\.$//g')
  # TODO add this as an option for alias in sqlite3 database instead of hardcoded that way more can be added on the commandline
  [[ "$vpn_conn" =~ vpn-na-west-[0-9]+\.corp\.salesforce\.com ]] \
        && echo aloha-west || echo "$vpn_conn"
}

if [[ "$1" == "-cmd" ]]; then
  $cisco "${@:2}"
fi
PASSWORD=""

# shellcheck disable=SC2120
function getPassword(){
  dir=~/cisco-keys
  mkdir -p ${dir}
  kf=${dir}/key.txt
  def=cisco-pass.bin
  if [[ -n "$2" ]]; then # if a second value is passed to function then that is the keyfile name
      def=$2
  fi
  of=$dir/$def
  if [[ ! -f "$of" ]]; then
    # Read Password
    echo -n Password:
    read -s password
    echo
    # Run Command
    # generate a 2048-bit RSA key and store it in key.txt
    test -f $kf || openssl genrsa -out $kf 2048

    # encrypt password using the RSA key in key.txt
    echo "$password" | openssl rsautl -inkey $kf -encrypt >"$of"
  fi
  # decrypt the message and output to variable
  PASSWORD="$(openssl rsautl -inkey $kf -decrypt <$of)"
}

POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"
  case ${key} in
    -d|--disconnect)
    disconnect
    exit 0
    ;;
    -c|--connect)
    getPassword
    pass=$PASSWORD #$(getPassword)
    [[ "$#" -eq 3 ]] && grp="$3" || grp=""
    if [[ "$2" == "$(getConnection)" ]]; then
      echo "already connected to: $2";
      exit 0
    else
      disconnect
    fi
    connect "$USER" "$pass" "$2" "$grp"
    exit 0
    ;;
    -g|--get-connected)
    getConnection
    exit 0
    ;;
    -p|--get-password)
    getPassword
    exit 0
    ;;
    -rp|--remove-password)
    rm -f ~/cisco-keys/{key.txt,cisco-pass.bin}
    exit 0
    ;;
    -cp|--change-password)
    rm -f ~/cisco-keys/{key.txt,cisco-pass.bin}
    getPassword
    exit 0
    ;;
    -np|--needs-password)
    [[ -f ~/cisco-keys/cisco-pass.bin ]] && exit 0 || exit 1;
    ;;
    -sp|--set-password)

    ;;
    -h|--help)
    printHelp
    exit 0
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
  esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters
